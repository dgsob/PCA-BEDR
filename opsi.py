# -*- coding: utf-8 -*-
"""OPSI4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PE0Kzy4NfcoOpQZ3XcGbB8RZHomtuvJl
"""

!pip install biosppy

!pip install wfdb

"""#Script for extracting respration from ECG with the use of PCA"""

import numpy as np
import scipy.signal as signal
from biosppy.signals import ecg
from sklearn.decomposition import PCA
from scipy.interpolate import CubicSpline
import wfdb
import matplotlib.pyplot as plt
import os
from scipy.stats import pearsonr
from sklearn.metrics import mean_squared_error

def _extract_qrs_segments(ecg_signal, rpeaks, feature_window, sampling_rate):
    half_window = int(feature_window * sampling_rate / 2)
    return [ecg_signal[r - half_window:r + half_window] for r in rpeaks]

def _construct_aux_signal(ecg_signal, rpeaks, pca_component, feature_window, sampling_rate):
    aux_signal = np.zeros(len(ecg_signal))
    half_window = int(feature_window * sampling_rate / 2)
    for r in rpeaks:
        aux_signal[r - half_window:r + half_window] = pca_component
    return aux_signal

def _interpolate_edr(differences, rpeaks, sampling_rate, signal_size_samples):
    rpeaks_time = rpeaks / sampling_rate
    spline = CubicSpline(rpeaks_time, differences)
    interpolation_times = np.linspace(0, signal_size_samples / sampling_rate, signal_size_samples)
    return spline(interpolation_times)

def apply_bandpass_filter(input_signal, sampling_rate, lowcut=0.2, highcut=0.4, order=3):
    sos = signal.butter(order, [lowcut, highcut], 'bandpass', fs=sampling_rate, output='sos')
    filtered_signal = signal.sosfiltfilt(sos, input_signal)
    return filtered_signal

def plot_results(reference_respiration, edr, sampling_rate):
    reference_normalized = (reference_respiration - np.mean(reference_respiration)) / np.std(reference_respiration)
    edr_normalized = (edr - np.mean(edr)) / np.std(edr)
    correlation = np.corrcoef(reference_normalized, edr_normalized)[0, 1]

    time_axis = np.arange(len(reference_respiration)) / sampling_rate

    plt.figure(figsize=(16, 4))
    plt.plot(time_axis, reference_normalized, label='Reference Respiratory Signal', color='orange')
    plt.plot(time_axis, edr_normalized, label='EDR Extracted with PCA', color='black')
    plt.title(f'Respiratory Signal vs. EDR (Correlation: {correlation:.3f})')
    plt.xlabel('Time (s)')
    plt.ylabel('Amplitude')
    plt.legend()
    plt.grid(axis='y', alpha=0.75)
    plt.tight_layout()
    plt.show()

def plot_spectrum(reference_respiration, edr, sampling_rate):
    reference_normalized = (reference_respiration - np.mean(reference_respiration)) / np.std(reference_respiration)
    edr_normalized = (edr - np.mean(edr)) / np.std(edr)

    plt.figure(figsize=(16, 4))
    freq_reference, spectrum_reference, line_ref = plt.magnitude_spectrum(reference_normalized, Fs=sampling_rate, label='Respiratory Signal Spectrum', color='orange')
    freq_edr, spectrum_edr, line_edr = plt.magnitude_spectrum(edr_normalized, Fs=sampling_rate, label='EDR Spectrum', color='black')
    plt.title('Spectrums of Respiratory Signal vs. EDR')
    plt.xlabel('Frequency (Hz)')
    plt.ylabel('Magnitude')
    plt.xlim([0,1])  # don't display more than 1Hz for better visibility
    plt.legend()
    plt.grid(axis='y', alpha=0.75)
    plt.tight_layout()
    plt.show()

def extract_edr_with_pca(ecg_signal, sampling_rate, feature_window=0.08, filter_ecg=True):
    if filter_ecg:
        sos = signal.butter(6, 40, 'lowpass', fs=sampling_rate, output='sos')
        ecg_signal = signal.sosfiltfilt(sos, ecg_signal)

    rpeaks = ecg.hamilton_segmenter(signal=ecg_signal, sampling_rate=sampling_rate)[0]
    qrs_segments = _extract_qrs_segments(ecg_signal, rpeaks, feature_window, sampling_rate)

    pca = PCA(n_components=1)
    pca.fit(qrs_segments)
    aux_signal = _construct_aux_signal(ecg_signal, rpeaks, pca.components_[0], feature_window, sampling_rate)

    rpeaks_aux = ecg.hamilton_segmenter(signal=aux_signal, sampling_rate=sampling_rate)[0]
    differences = ecg_signal[rpeaks] - aux_signal[rpeaks_aux]

    return _interpolate_edr(differences, rpeaks, sampling_rate, len(ecg_signal))

def get_data_from_physionet_hea_file(path_to_file, samples_num_to_process=None):
    record = wfdb.rdrecord(path_to_file, sampto = samples_num_to_process)
    sampling_rate = record.fs
    respiration = record.p_signal[:, 0]
    ecg_signal = record.p_signal[:, 1]

    return respiration, ecg_signal, sampling_rate

"""#Example Usage

#1.1. Example record with 30 seconds respiration period
"""

path = "/content/drive/MyDrive/OPSI/fantasia/f1o02"

reference_respiration, ecg_signal, fs = get_data_from_physionet_hea_file(path, samples_num_to_process=250*30)

edr = extract_edr_with_pca(ecg_signal, fs)

plot_results(reference_respiration, edr, fs)
plot_spectrum(reference_respiration, edr, fs)

"""#1.2. Example record with 30 seconds respiration period filtered with a bandpass filter"""

path = "/content/drive/MyDrive/OPSI/fantasia/f1o02"

reference_respiration, ecg_signal, fs = get_data_from_physionet_hea_file(path, samples_num_to_process=250*30)

edr = extract_edr_with_pca(ecg_signal, fs)

edr = apply_bandpass_filter(edr, fs)
reference_respiration = apply_bandpass_filter(reference_respiration, fs)

plot_results(reference_respiration, edr, fs)
plot_spectrum(reference_respiration, edr, fs)

"""#2.1. Example record with 10 minutes respiration period"""

path = "/content/drive/MyDrive/OPSI/fantasia/f2y04"

reference_respiration, ecg_signal, fs = get_data_from_physionet_hea_file(path, samples_num_to_process=250*60*10)

edr = extract_edr_with_pca(ecg_signal, fs)

plot_results(reference_respiration, edr, fs)
plot_spectrum(reference_respiration, edr, fs)

"""#2.2. Example record with 10 minutes respiration period filtered with a bandpass filter"""

path = "/content/drive/MyDrive/OPSI/fantasia/f2y04"

reference_respiration, ecg_signal, fs = get_data_from_physionet_hea_file(path, samples_num_to_process=250*60*10)

edr = extract_edr_with_pca(ecg_signal, fs)

edr = apply_bandpass_filter(edr, fs)
reference_respiration = apply_bandpass_filter(reference_respiration, fs)

plot_results(reference_respiration, edr, fs)
plot_spectrum(reference_respiration, edr, fs)

"""#Testing all records with 10 minutes of respiration period for each"""

def evaluate_similarity(reference_respiration, edr, sampling_rate):
    corr, _ = pearsonr(reference_respiration, edr)
    rmse = mean_squared_error(reference_respiration, edr, squared=False)
    peaks_reference = ecg.hamilton_segmenter(signal=reference_respiration, sampling_rate=sampling_rate)[0]
    peaks_edr = ecg.hamilton_segmenter(signal=edr, sampling_rate=sampling_rate)[0]
    peak_count_difference = abs(len(peaks_reference) - len(peaks_edr))

    return corr, rmse, peak_count_difference

def main():
    data_directory = "/content/drive/MyDrive/OPSI/fantasia/"
    sufficient_similarity_threshold = 0.3

    similar_records = []
    same_peak_count_records = []
    all_correlations = []
    all_rmse = []
    all_peak_count_diffs = []

    for filename in os.listdir(data_directory):
        if filename.endswith(".hea"):
            file_path = os.path.join(data_directory, filename.replace(".hea", ""))
            try:
                reference_respiration, ecg_signal, fs = get_data_from_physionet_hea_file(file_path, samples_num_to_process = 250*60*10)
                edr = extract_edr_with_pca(ecg_signal, fs)

                edr = apply_bandpass_filter(edr, fs)
                reference_respiration = apply_bandpass_filter(reference_respiration, fs)

                correlation, rmse, peak_count_diff = evaluate_similarity(reference_respiration, edr, fs)
                all_correlations.append(abs(correlation))
                all_rmse.append(rmse)
                all_peak_count_diffs.append(peak_count_diff)

                if abs(correlation) >= sufficient_similarity_threshold: # abs because if it is a litle shifted in phase it will be negative and it's still a valid result
                    similar_records.append(filename)

                if peak_count_diff == 0:
                    same_peak_count_records.append(filename)

                print(f"{filename}: Correlation={correlation:.3f}, RMSE={rmse:.3f}, Peak Count Diff={peak_count_diff:.2f}")
            except Exception as e:
                print(f"Error processing {filename}: {e}")

    print("\nSummary:")
    print(f"Number of records with sufficient similarity: {len(similar_records)} out of {len(all_correlations)}")
    print(f"Number of records with the same peak count: {len(same_peak_count_records)} out of {len(all_correlations)}")
    print(f"Mean Correlation: {np.mean(all_correlations):.3f}")
    print(f"Max Correlation: {max(all_correlations):.3f}")
    print(f"Min Correlation: {min(all_correlations):.3f}")
    print(f"Mean RMSE: {np.mean(all_rmse):.3f}")
    print(f"Mean Peak Count Difference: {np.mean(all_peak_count_diffs):.2f}")
    print(f"Records with sufficient similarity: {similar_records}")

if __name__ == "__main__":
    main()

